name: Frontend Pipeline

on:
  push:
    branches:
      - main
jobs:
  build:
    timeout-minutes: 60
    name: Build frontend
    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v4

      - name: Set node version and start backend
        uses: actions/setup-node@v4
        with:
          node-version: 20.x

      - name: Start PostgreSQL with Docker
        uses: hoverkraft-tech/compose-action@v2.0.1
        with:
          services: postgres
          compose-file: "docker-compose.test.yml"
        env:
          POSTGRES_PASSWORD: ${{secrets.TEST_DB_PASSWORD}}

      - name: Wait for Postgres to be ready
        id: wait-postgres
        run: |
          set -e
          attempt=0
          max_attempts=10
          while [ "$attempt" -lt "$max_attempts" ]; do
            sleep 5
            pg_isready -h localhost -p 5432 && break
            attempt=$((attempt+1))
            echo "Waiting for Postgres..."
          done
          if [ "$attempt" -eq "$max_attempts" ]; then
            echo "PostgreSQL did not start in time"
            exit 1
          fi
          echo "PostgreSQL database is ready"

      - name: Get Docker logs if Postgres server fails
        if: failure() && steps.wait-postgres.outcome != 'success'
        run: docker logs friendly-spork-postgres-1

      - name: Create test database and user
        run: |
          export PGPASSWORD=${{ secrets.TEST_DB_PASSWORD }}
          psql -h localhost -U postgres -c "CREATE DATABASE test_manage;"
          psql -h localhost -U postgres -d test_manage -c "CREATE USER test_db_user WITH PASSWORD '${{ secrets.TEST_DB_PASSWORD }}';"
          psql -h localhost -U postgres -d test_manage -c "GRANT ALL PRIVILEGES ON DATABASE test_manage TO test_db_user;"
          psql -h localhost -U postgres -d test_manage -c "GRANT ALL PRIVILEGES ON DATABASE test_manage TO test_db_user;"
          psql -h localhost -U postgres -d test_manage -c "GRANT USAGE ON SCHEMA public TO test_db_user;"
          psql -h localhost -U postgres -d test_manage -c "GRANT CREATE ON SCHEMA public TO test_db_user;"

      - run: yarn install
        working-directory: manage_backend
        env:
          DB_HOST: "localhost"
          DB_PORT: "5432"

      - name: Setup frontend
        run: yarn install
        working-directory: manage_frontend

      - name: Start backend
        run: |
          export DATABASE_URL="postgresql://${{secrets.TEST_DB_USER}}:${{secrets.TEST_DB_PASSWORD}}@localhost:5432/${{secrets.TEST_DB_NAME}}"
          yarn run start:ci > backend.log 2>&1 &
        working-directory: manage_backend
        env:
          DB_URL: "postgresql://${{secrets.TEST_DB_USER}}:${{secrets.TEST_DB_PASSWORD}}@localhost:5432/test_manage"
          JWT_SECRET: ${{secrets.JWT_SECRET}}
          DB_PASSWORD: ${{secrets.DB_PASSWORD}}
          DB_USER: ${{secrets.DB_USER}}
          SSL_VALUE: "false"
        timeout-minutes: 5

      - name: Drizzle kit migration
        run: yarn run drizzle-kit migrate
        working-directory: manage_backend
        env:
          DB_URL: "postgresql://${{secrets.TEST_DB_USER}}:${{secrets.TEST_DB_PASSWORD}}@localhost:5432/test_manage"

      - name: Seed database
        env:
          DB_URL: "postgresql://${{secrets.TEST_DB_USER}}:${{secrets.TEST_DB_PASSWORD}}@localhost:5432/${{secrets.TEST_DB_NAME}}"
          DB_HOST: "localhost"
          DB_PORT: "5432"
          DB_PASSWORD: ${{secrets.DB_PASSWORD}}
          TEST_EMAIL: ${{secrets.TEST_EMAIL}}
          TEST_PASSWORD: ${{secrets.TEST_PASSWORD}}
        run: yarn run seed
        working-directory: manage_backend

      - name: Wait for backend to be ready
        run: sleep 10

      - name: Setup Playwright
        run: npx playwright install --with-deps
        working-directory: manage_frontend

      - name: Run Playwright tests
        run: yarn run ci-test
        working-directory: manage_frontend
        env:
          MANAGE_BACKEND: ${{secrets.MANAGE_BACKEND}}
          PLAYWRIGHT_TEST_EMAIL: ${{secrets.PLAYWRIGHT_TEST_EMAIL}}
          PLAYWRIGHT_TEST_PASSWORD: ${{secrets.PLAYWRIGHT_TEST_PASSWORD}}
          DATABASE_URL: "postgresql://${{secrets.TEST_DB_USER}}:${{secrets.TEST_DB_PASSWORD}}@localhost:5432/${{secrets.TEST_DB_PASSWORD}}"
      - uses: actions/upload-artifact@v4
        if: always()
        with:
          name: playwright-report
          path: manage_frontend/playwright-report/
          retention-days: 30

      - name: Output backend logs if there is a failure
        if: failure()
        run: cat manage_backend/backend.log
